extends _layout.pug

block content
    h1(class="display-4 text-center")
        | O padrão MVC

    blockquote.blockquote
        | Saiba mais sobre o padrão MVC na <a href="https://pt.wikipedia.org/wiki/MVC" target="_blank">Wikipédia</a>.
        | Aqui eu vou só tecer alguns comentários e apresentar o meu ponto de vista com relação ao assunto
        | aplicado exclusivamente ao desenvolvimento de front-end com jQuery e JavaScript puro.

    p.lead
        | Tento reunir aqui o que é, para mim, a base, a essência, e como podemos adotar o padrão MVC
        | para separar as responsabilidades de nossa aplicação front-end.

    blockquote.blockquote
        | Não tente fazer comparações com Frameworks/Bibliotecas como Angular, VueJS e Ember por exemplo.
        | Esses também tratam o padrão MVC, mas estão mais ligados ao padrão
        | <a href="https://en.wikipedia.org/wiki/MVVM" target="_blank">MVVM</a> além de nos fornecer
        | inúmeras ferramentas para suportar SPA's, mas esses são outros assuntos,
        | aqui focamos no entendimento do padrão MVC para front-end Web.

    p.lead Você pode desenvolver uma aplicação usando o padrão MVC sem precisar de um Framework para isso.

    h2 Um pouco de teoria

    p.lead
        | Visto que o MVC é um padrão de arquitetura que se utiliza do modelo em camadas para organizar
        | suas peças, e que define explicitamente 3 (três camadas), são elas:
    
    ul.lead.font-weight-bold
        li Model (modelo)
        li View (visão)
        li Controller (controlador)

    p.lead
        | Pra mim, o desenho que melhor representa essa arquitetura é esse:

    img(class="img-fluid img-thumbnail rounded mx-auto d-block" src="images/mvc.png" alt="MVC")

    p.lead
        | Aqui o mais importante não é você saber em que camada fica o código que o usuário vê (view)
        | ou onde ficam seus objetos de modelo (model), e etc.
        | O mais importante é você saber como as camadas interagem entre si.

    p.lead Esteja atento as setas:

    img(class="img-fluid img-thumbnail rounded" src="images/mvc_seta_atualiza.png")

    p.lead
        | Essa seta indica que uma camada é a responsável por atualizar o conteúdo de outra camada.
        | Em outras palavras, tem o controle da outra camada (por isso a seta sólida).

    img(class="img-fluid img-thumbnail rounded" src="images/mvc_seta_notifica.png")

    p.lead
        | Essa seta indica que uma camada é responsável por notificar ações e mudanças que ocorreram
        | em seu conteúdo a outra camada, e que não conhece nem tem controle sobre a outra
        | (por isso a seta tracejada).

    img(class="img-fluid img-thumbnail rounded" src="images/mvc_seta_usa.png")

    p.lead
        | Essa seta indica que uma camada usa os dados de outra camada, e apesar de não controlá-la,
        | conhece sua estrutura. Podemos dizer que tem acesso de leitura à outra camada
        | (por isso a seta sólida, porém menos acentuada).

    p.lead Vejamos então as responsabilidade de cada camada:

    h3.text-monospace Model

    p.lead
        | A camada de modelo é a responsável por notificar a camada <strong>Controller</strong>
        | de qualquer mudança em seu conteúdo.
        | <i>Essa é controlada exclusivamente pela camada <strong>Controller</strong></i>.

    h3.text-monospace View

    p.lead 
        | A camada de visão é a responsável por notificar a camada <strong>Controller</strong>
        | de qualquer interação que o usuário faz em seu conteúdo.
        | Ela <i>conhece e usa</i> os dados da camada <strong>Model</strong>, e <i>também é
        | controlada exclusivamente pela camada <strong>Controller</strong></i>.

    h3.text-monospace Controller

    p.lead 
        | A camada de controle é a responsável por atualizar a camada <strong>Model</strong>
        | e <strong>View</strong>.
        | Também é a responsável por direcionar o fluxo entre as interações na camada de visão
        | e as mudanças na camada de modelo.
        | Em outras palavras: <i>"Controla e orquestra tudo"</i>.

    h2 De que vale essa teoria?

    p.lead
        | Essa teoria não serve de nada se você não consegue aplicá-la em seus projetos,
        | e você consegue aplicar MVC em projetos jQuery e/ou JavaScript puro se simplesmente
        | <strong>não violar algumas regras que o MVC nos impõe</strong>.
        | Se você conhece e obedece essas regras durante o desenvolvimento de sua aplicação,
        | pode dizer que está construindo uma aplicação com a arquitetura MVC.

    h3 E que regras são essas?

    p.lead
        | <strong>Regra 1:</strong> Um modelo não atualiza a visão quando sofre alteração. Ao invés disso, notifica
        | o controlador para que ele decida o que fazer.

    p.text-info
        | Até porque <strong>Model</strong> não conhece nem controla <strong>View</strong>, além
        | de, é claro, um único modelo poder ser representado por <strong>N views</strong>.

    p.lead
        | <strong>Regra 2:</strong> Uma visão não altera o estado do modelo quando o usuário interage pedindo isso.
        | Ao invés disso, notifica o controlador para que ele decida o que fazer.

    p.lead
        | <strong>Regra 3:</strong> Uma visão não <i>altera a si própria</i>.
        | Ao invés disso, suas mudanças de visão são reflexos das mudanças do modelo.
        | Sua única responsabilidade é representar o estado atual de um modelo em um meio
        | específico.

    p.lead
        | <strong>Regra 4:</strong> O controlador não deve atualizar os detalhes da visão por ela.
        | Ao invés disso, deve requerer <strong>uma visão atualizada do modelo que tem em mãos</strong>.
        | Essa é uma responsabilidade da própria camada de <code>visão</code>, afinal ela é que conhece os
        | detalhes do meio a que a informação precisa ser apresentada.

    h2 Um exemplo prático

    p.lead
        | Vamos usar um exemplo bem simples pra demonstrar como seria construí-lo <i><strong>quebrando as regras
        | do MVC</strong></i> a princípio, e em seguida ir corrigindo para atender a todas as regras
        | e finalizar com o exemplo <i><strong>NÃO quebrando as regras do MVC</strong></i>.

    p.lead O exemplo é esse:
    
    p.lead
        | Uma tela onde o usuário pode informar seu nome no GitHub através de um campo de texto,
        | e uma imagem que mostra o avatar desse usuário no GitHub.
        | Sempre que ouver interação com o campo de nome do usuário, a parte de visão do avatar
        | deve ser atualizada pra representar a informação.

    p.lead Nessa demonstração abaixo, temos o nosso resultado final em funcionamento:

    div(data-gui="demo" data-file-path="samples/snippets/mvc/mvc-github-avatar.html")

    h3 Um "pitaco" sobre o modelo

    p.lead
        | O modelo não se trata de uma classe do tipo <code>FormularioModel</code>, ou <code>FormViewModel</code>,
        | apesar de normalmente ser representado por coisas desse tipo.
        | Mas antes de mais nada: <i>"O modelo é todo o dado que faz sentido pra que você consiga exibir determinada
        | informação"</i>, porque isso será usado para firmar um <i>contrato</i> entre as partes envolvidas.

    p.lead
        | Dependendo da linguagem/plataforma que você está utilizando, isso pode ser uma classe, um arquivo, um tipo,
        | um módulo, etc.
        | Mas isso são detalhes, e não a essência, e o que importa é <strong><i>você conhecer que dados são necessários
        | para que consiga exibir algum tipo de informação útil em um meio específico</i></strong>.

    p.lead
        | No nosso exemplo, temos um <code>NOME</code> e uma <code>IMAGEM</code>, que nesse caso é na verdade 
        | a <code>URL de uma imagem</code>.
        | Independente de você usar uma <code>classe</code> ou um <code>objeto</code> para isso,
        | deve concordar comigo que <i>isso aqui</i> representa claramente o nosso modelo:
    
    div(data-gui="code-block"
        data-lang="json"
        data-file-path="samples/snippets/mvc/mvc-github-avatar-model.json")

    p.lead
        | Então vamos <code>acordar</code> que isso é tudo que precisamos para conseguir
        | desenvolver essa funcionalidade.

    h3 Voltando ao exemplo

    p.lead
        | Você que já conhece e usa jQuery no seu dia-a-dia, sabe que consegue construir essa
        | funcionalidade facilmente com um código básico. Então vamos ao código de nossa primeira
        | solução.

    h4 Solução 1
    
    div(data-gui="code-block"
        data-lang="html"
        data-file-path="samples/snippets/mvc/mvc-github-avatar-without-mvc-clean-1.html")

    blockquote.blockquote
        p Uma nota sobre o código de exemplo:
        footer.blockquote-footer
            | Nós estamos omitindo as classes do Bootstrap além de parte da estrutura do HTML completo
            | e deixando somente o que importa para entender a estrutura do que apresentamos.
            | Mas se você abrir o código do exemplo <code>samples/snippets/mvc/mvc-github-avatar.html</code>
            | em seu navegador vai enxergá-lo por completo.

    p.lead
        | Pronto, está funcionando! Mas com esse código estamos <i><strong>quebrando as regras do MVC</strong></i>,
        | mas especificamente a <strong>regra 3</strong>.
        | Porque nossa visão está reagindo a uma interação do usuário e refletindo isso em outra parte da visão
        | diretamente sem notificar essa mudança ao modelo.
        | E se houvesse mais outra parte da visão que dependa também dessa parte do modelo?
        | Teríamos que adicionar o tratamento também no <code>onkeyup</code> até isso ficar insustentável?

    h4 Solução 2

    p.lead
        | Então tá! Vamos ver outra solução.
        | Podemos criar um objeto para representar o modelo e criar também um método pra atualizar a visão 
        | e pronto! Com isso a <code>visão</code> não altera a si mesma.
    
    div(data-gui="code-block"
        data-lang="html"
        data-file-path="samples/snippets/mvc/mvc-github-avatar-without-mvc-clean-2.html")

    p.lead
        | Só que agora estamos quebrando 2 (duas) regras ao mesmo tempo. Porque a <strong>regra 1</strong> diz que
        | um modelo não atualiza a visão, e o método que atualiza a imagem na visão está no objeto de modelo.
        | Também a <strong>regra 2</strong> diz que a visão não altera o estado do modelo, e isso ocorre
        | quando estamos chamando <code>model.changeName()</code> diretamente de <code>onkeyup</code> na visão.

    h4 Solução 3

    p.lead
        | Então vamos a outra solução. Criemos um método de controle que possamos somente
        | notificar, e ele ser o responsável por decidir essas coisas.
    
    div(data-gui="code-block"
        data-lang="html"
        data-file-path="samples/snippets/mvc/mvc-github-avatar-without-mvc-clean-3.html")

    p.lead
        | Quase deu, mas esse método de controle está atualizando os detalhes da visão, e
        | isso é uma quebra da <strong>regra 4</strong>.
        | Essa é uma responsabilidade da própria camada de visão, afinal ela é que conhece os
        | detalhes do meio a que a informação precisa ser apresentada.

    h4 Solução 4

    p.lead
        | Então vejamos logo outra solução.
        | Vamos criar um objeto de visão para que o controlador possa requerer a atualização.

    div(data-gui="code-block"
        data-lang="html"
        data-file-path="samples/snippets/mvc/mvc-github-avatar-without-mvc-clean-4.html")

    p.lead
        | Parece que resolvemos o problema! Então agora não é o modelo que está atualizando
        | a visão, e a visão também não está mais atualizando o modelo, além de o controlador
        | não ter mais que se preocupar com os detalhes da visão.

    p.lead.font-weight-bold
        | Façamos então uma conferência nas regras pra ver se estamos obedecendo a todas elas:

    ul.lead.list-unstyled.text-success
        li <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 1:</span>
            | Um modelo não atualiza a visão quando sofre alteração.
        li <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 2:</span>
            | Uma visão não altera o estado do modelo quando o usuário interage pedindo isso.
        li <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 3:</span>
            | Uma visão não altera a si própria.
        li <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 4:</span>
            | O controlador não deve atualizar os detalhes da visão por ela.

    p.lead
        | Parece que está tudo bem. Ou melhor: <i>Estaria tudo bem se não fossem os 
        | <strong>"Ao invés disso..."</strong></i>.

    p.lead
        | Quando há uma interação do usuário na visão alterando o nome, a visão está nofiticando o
        | controlador chamando o método <code>onChangeName</code>. Este método do controlador por sua
        | vez é que atualiza o modelo, e isso está correto, porém ao mesmo tempo já está adiantando
        | o trabalho, visto que está <i><strong>com a faca e o queijo na mão</strong></i> já aproveitou para atualizar
        | a visão chamando <code>view.updateView(model)</code>.

    p.lead
        | Aqui apesar de ser o controlador que está atualizando o modelo e também atualizando a visão,
        | e essas são realmente responsabilidades do controlador, tem um problema...

    p.lead Cadê a separação de responsabilidades?

    p.lead
        | Esse método <code>onChangeName</code> deveria ser responsável somente por tratar de atender a
        | notificação feita pela visão, ou seja, algo foi alterado (o nome) e isso deve refletir no modelo.
        | Aqui o trabalho deste método termina quando ele atualiza o modelo.

    p.lead
        | O modelo por sua vez é que deveria <strong><i>"notificar o controlador para que ele decida o 
        | que fazer"</i></strong>

    p.lead Em resumo, quase conseguimos atender todas as regras. Ficamos assim:

    ul.lead.list-unstyled
        li.text-info <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 1 (50%):</span>
            | Um modelo não atualiza a visão quando sofre alteração.
            | <del class="text-danger">Ao invés disso, notifica o controlador para que ele decida o que fazer.</del>
        li.text-success <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 2 (100%):</span>
            | Uma visão não altera o estado do modelo quando o usuário interage pedindo isso.
            | Ao invés disso, notifica o controlador para que ele decida o que fazer.
        li.text-info <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 3 (50%):</span>
            | Uma visão não altera a si própria.
            | <del class="text-danger">Ao invés disso, suas mudanças de visão são reflexos das mudanças do modelo.</del>
        li.text-success <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 4 (100%):</span>
            | O controlador não deve atualizar os detalhes da visão por ela.
            | Ao invés disso, deve requerer uma visão atualizada do modelo que tem em mãos.

    p.lead
        | Ficou faltando o modelo ser o responsável por notificar o controlador de sua mudança para que esse
        | decida o que fazer. E com isso podemos dizer que toda a alteração na visão é reflexo das mudanças
        | do modelo.

    h5 Solução 5
    
    div(data-gui="code-block"
        data-lang="html"
        data-file-path="samples/snippets/mvc/mvc-github-avatar-without-mvc-clean-5.html")

    p.lead Agora sim temos um exemplo que <i><strong>NÃO quebra as regras do MVC</strong></i>.

    ul.lead.list-unstyled
        li.text-success <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 1:</span>
            | Um modelo não atualiza a visão quando sofre alteração.
            | Ao invés disso, notifica o controlador para que ele decida o que fazer.
        p
            | Observe o método <code>model.changeName()</code>, ele agora é o responsável por alterar
            | o nome, e de quebra já atualiza a URL e tira essa responsabilidade do controlador, visto
            | que é algo realmente relacionado ao modelo, ou seja, a URL é um valor calculado à partir
            | do valor <code>name</code> do próprio modelo. Esse já se encarrega de notificar o controlador
            | da sua mudança que sofreu através da chamada <code>onUpdateModel(this)</code>.

        li.text-success <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 2:</span>
            | Uma visão não altera o estado do modelo quando o usuário interage pedindo isso.
            | Ao invés disso, notifica o controlador para que ele decida o que fazer.
        p
            | Observe que a visão está lá somente para apresentar os dados, o máximo que ela faz é
            | notificar o controlador quando o campo <code>nome</code> sofreu uma interação do usuário.
            | E foi o próprio controlador que configurou esse gatilho com o trecho 
            | <code>$('#nome').on('keyup', onChangeName)</code>.

        li.text-success <i class="fas fa-check-square"></i>
            | <span class="font-weight-bold">Regra 3:</span>
            | Uma visão não altera a si própria.
            | Ao invés disso, suas mudanças de visão são reflexos das mudanças do modelo.

        p
            | Não existe nenhum código na própria visão que manipule a si mesmo para formatar como
            | a informação deve representar o modelo.
            | Ela somente reage as mudanças obedecendo ao modelo informado pelo controlador.
            | Isso é tão <i>legal</i> que nós aproveitamos pra incluir o trecho <code>model.changeName('erlimar')</code>
            | logo no <i>bootstrap</i> do controlador; já que a view já está reagindo as mudanças do modelo,
            | aproveitamos pra inicializar o modelo já com algum dado.
            | Assim a aplicação já inicia mostrando valores pre-definidos, e veja que fizemos isso somente adicionando
            | mais uma linha de código e nossa aplicação atendeu prontamente.

    h2 Isso é MVC!

    p.lead
        | Sei que talvez você esperasse algo mais. Mas esse código realmente obedece ao padrão MVC de arquitetura.
        | Com isso queremos dizer que desenvolver aplicações MVC é uma questão de conceito mais do que ferramentas.

    p.lead
        | E se você conseguir observar melhor, vai perceber que basicamente desenvolvemos uma aplicação mais
        | <i>reativa</i> do que imperativa/estruturada, e nós usamos uma abordagem de troca de mensagens entre
        | as camadas, àpesar de não termos explicitamente um mecanismo de mensagem, algo como, <code>sendMessage()</code>
        | ou <code>receiveMessage()</code>. Essa é a lógica de desenvolver em uma arquitetura baseada em MVC.

    p.lead 
        | Vamos voltar e dar mais uma olhada na nossa imagem do início e perceber como nosso código está
        | seguindo rigorosamente o fluxo proposto pelo diagrama:

    img(class="img-fluid img-thumbnail rounded mx-auto d-block" src="images/mvc.png" alt="MVC")

    p.lead
        | 1. Primeiro, nós já inicializamos nosso modelo com algum valor, e a visão o apresentou perfeitamente.

    p.lead
        | 2. Em seguida, quando o usuário altera o campo <code>nome</code> no componente de visão, esse
        | <strong><i>notifica</i></strong> o controlador de tal interação.

    p.lead
        | 3. O controlador por sua vez decide que isso deve refletir em uma mudança no componente
        | de modelo; e <strong>atualiza</strong> o modelo.

    p.lead
        | 4. O componente então, <i>calcula as mudanças</i> e em seguida <strong><i>notifica</i></strong>
        | o controlador que suas mudanças já estão prontas e passa o resultado final de seus cálculos,
        | com isso entrega um modelo <i>"prontinho"</i> para o consumo.

    p.lead
        | 5. Seguindo, o controlador recebe essa <i>notificação</i> de mudança no modelo, e imediatamente
        | pede uma <strong>atualização</strong> ao componente de visão para refletir exatamente esse
        | novo estado do modelo.

    p.lead
        | Pronto, nossa aplicação está viva! Com as responsabilidades bem distribuídas entre camadas distintas
        | que se comunicam perfeitamente em um fluxo bem orquestrado.

    h3 Os detalhes

    p.lead
        | O resto são detalhes, e é exatamente isso que os Frameworks e Bibliotecas de MVC nos entregam,
        | <i>"a implementação de vários detalhes que tornam nossa vida mais fácil"</i>.
        | Porém o entendimento do padrão MVC nos faz construir aplicações mais fluidas e manuteníveis mesmo 
        | sem o uso de um desses frameworks/bibliotecas.
        | Nesse exemplo que apresentamos aqui, nós conseguimos com o uso de puro JavaScript e do 
        | <strong><i>"Velho e Querido jQuery"</i></strong> implementar uma peça de software usando essa arquitetura.

    p.lead
        | Talvez a falta das classes <code>Model</code>, <code>View</code> e <code>Controller</code>
        | tenha te deixado desconfortável pelo seu costume com frameworks diversos, mas entenda que isso
        | são só utilitários para nos ajudar a ser mais produtivos.

    p.lead
        | Caso você ache o código final uma bagunça e não consiga distinguir as peças separadametne, imagine
        | que:
        
    ul.lead
        li A página <code>HTML</code> em si junto com o objeto <code>view</code> no <i>script</i> formam o componente de visão;
        li O objeto <code>model</code> no script é o componente de modelo;
        li O restante do código no script, ou seja, os métodos <code>onChangeName</code> e <code>onUpdateModel</code>,
            | junto ao código de inicialização <code>model.changeName('erlimar')</code> e
            | <code>$('#nome').on('keyup', onChangeName)</code> compõem a <code>controller</code>.

    p.lead
        | Mas pra não te deixar tão desapontado, vamos separar o nosso código melhor e deixá-lo mais
        | profissional.

    h3.text-monospace <code>View</code>

    div(data-gui="code-block"
        data-lang="html"
        data-file-path="samples/snippets/mvc/mvc-view.html")

    div(data-gui="code-block"
        data-lang="js"
        data-file-path="samples/snippets/mvc/mvc-view.js")

    h3.text-monospace <code>Model</code>

    div(data-gui="code-block"
        data-lang="js"
        data-file-path="samples/snippets/mvc/mvc-model.js")

    h3.text-monospace <code>Controller</code>

    div(data-gui="code-block"
        data-lang="js"
        data-file-path="samples/snippets/mvc/mvc-controller.js")

    h2 Concluindo

//- block append scripts
